{"version":3,"sources":["../index.ts","../routes/index.ts","../utils/readFiles.ts","../models/api-keys.ts","../utils/db.ts","../utils/randomvalue.ts","../utils/uploadToR2.ts","../utils/s3.ts","../utils/apiKeyAuth.ts","../models/user.ts","../models/Plan.ts"],"sourcesContent":["import { createApp } from 'h3'\r\nimport { UFLRouter } from './routes'\r\nimport { Key } from './models/api-keys'\r\nimport Handler from './utils/apiKeyAuth'\r\n\r\nexport const app = createApp({\r\n\tonRequest: Handler,\r\n})\r\n\r\napp.use(UFLRouter)\r\n","import {\r\n\tcreateError,\r\n\tcreateRouter,\r\n\tdefaultContentType,\r\n\tdefineEventHandler,\r\n\treadBody,\r\n\treadFormData,\r\n\treadRawBody,\r\n\tsetResponseStatus,\r\n} from 'h3'\r\nimport { readFiles } from '../utils/readFiles'\r\nimport 'dotenv/config'\r\nimport type { ObjectId } from 'mongoose'\r\nimport { Key } from '../models/api-keys'\r\nimport { generateRandomString } from '../utils/randomvalue'\r\nimport { UploadToR2 } from '../utils/uploadToR2'\r\n\r\nexport const UFLRouter = createRouter()\r\n\r\ntype ApiKeyRequest = {\r\n\tuser_id?: ObjectId\r\n}\r\n\r\n// API KEY\r\nUFLRouter.post(\r\n\t'/api-key',\r\n\tdefineEventHandler(async (event) => {\r\n\t\tconst res: ApiKeyRequest = await readBody(event)\r\n\r\n\t\tif (!res.user_id || typeof res.user_id !== 'string') {\r\n\t\t\tthrow createError({\r\n\t\t\t\tstatus: 400,\r\n\t\t\t\tmessage: 'No user ID provided or bad format',\r\n\t\t\t\tstatusMessage: 'No user ID provided or bad format',\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tawait Key.create({ value: generateRandomString(28), user_id: res.user_id })\r\n\t\t\tsetResponseStatus(event, 201, 'Created API key successfully')\r\n\t\t\treturn {\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tmessage: 'Created API key successfully',\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tthrow createError({\r\n\t\t\t\tstatus: 500,\r\n\t\t\t\tmessage: 'Could not create api key',\r\n\t\t\t\tstatusMessage: 'Could not create api key',\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n)\r\n\r\n// UPLOAD\r\nUFLRouter.get(\r\n\t'/upload',\r\n\tdefineEventHandler(() => {\r\n\t\treturn `\r\n        <html>\r\n        <body>\r\n        <form method=\"POST\" encType=\"multipart/form-data\"> <input type=\"file\" name=\"file\" multiple /> <button type=\"submit\">Submit file</button> <form/>\r\n        <body />\r\n        <html/>\r\n        `\r\n\t})\r\n)\r\n\r\nUFLRouter.post(\r\n\t'/upload',\r\n\tdefineEventHandler(async (event) => {\r\n\t\tconst data = await readFiles(event)\r\n\r\n\t\tif (!data.files) {\r\n\t\t\tsetResponseStatus(event, 404, 'No files found')\r\n\t\t\treturn `${event.node.res.statusCode} No files in this dunya`\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tconst uploadedFiles = data.files.map(async (file) => {\r\n\t\t\t\t\tawait UploadToR2({ file, bucket: 'root', image: true })\r\n\t\t\t\t})\r\n\r\n\t\t\t\tsetResponseStatus(event, 200, 'Files uploaded successfully')\r\n\t\t\t\treturn 'Files Uploaded'\r\n\t\t\t} catch (e) {\r\n\t\t\t\tsetResponseStatus(event, 500, 'Error uploading files')\r\n\t\t\t\treturn { payload: e.message, message: 'Error uploading files' }\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n)\r\n\r\nUFLRouter.get(\r\n\t'/',\r\n\tdefineEventHandler((event) => {\r\n\t\tif (event.context.user) {\r\n\t\t\treturn event.context.user._doc.name\r\n\t\t}\r\n\t\treturn 'Bye'\r\n\t})\r\n)\r\n","import { H3Event, defaultContentType, send, setResponseStatus } from 'h3'\r\nimport type { Fields, Files, Options } from 'formidable'\r\nimport formidable from 'formidable'\r\nimport { File } from 'formidable'\r\n\r\ninterface ReadFilesOptions extends Options {\r\n\tgetForm?: (incomingForm: any) => void\r\n}\r\n\r\nexport async function readFiles(\r\n\tevent: H3Event,\r\n\toptions?: ReadFilesOptions\r\n): Promise<\r\n\t| {\r\n\t\t\tfiles: File[] | null\r\n\t\t\tsuccess: boolean\r\n\t\t\terror?: { value: boolean; payload?: Record<any, any> }\r\n\t  }\r\n\t| { files: null; error: { value: boolean; payload?: Record<any, any> } }\r\n> {\r\n\tconst form = formidable(options)\r\n\r\n\ttry {\r\n\t\tconst [fields, files] = await form.parse(event.node.req)\r\n\r\n\t\treturn {\r\n\t\t\tsuccess: true,\r\n\t\t\tfiles: files.file ?? null,\r\n\t\t}\r\n\t} catch (err) {\r\n\t\treturn {\r\n\t\t\tfiles: null,\r\n\t\t\terror: {\r\n\t\t\t\tvalue: true,\r\n\t\t\t\tpayload: err as Record<any, any>,\r\n\t\t\t},\r\n\t\t}\r\n\t}\r\n}\r\n","import mongoose from 'mongoose'\r\nimport { connectToDb } from '../utils/db'\r\n\r\nconst { Schema } = mongoose\r\n\r\nconnectToDb()\r\nconst KeySchema = new Schema(\r\n\t{\r\n\t\tvalue: { type: String, unique: true, required: true },\r\n\t\tuser_id: mongoose.Types.ObjectId,\r\n\t\tactive: Boolean,\r\n\t},\r\n\t{ timestamps: true }\r\n)\r\n\r\nconst KeyModel = () => mongoose.model('api-keys', KeySchema)\r\nexport const Key = (mongoose.models['api-keys'] || KeyModel()) as ReturnType<typeof KeyModel>\r\n","import mongoose from 'mongoose'\r\nimport 'dotenv/config'\r\n\r\nexport const connectToDb = async () => {\r\n\ttry {\r\n\t\tawait mongoose.connect(process.env.MONGOOSE_URI!, { dbName: 'Uploadflare' })\r\n\t\tconsole.log('Connected')\r\n\t} catch (e) {\r\n\t\tconsole.log(e)\r\n\t}\r\n}\r\n","function generateRandomInteger(max: number): number {\r\n\tconst bytes = new Uint8Array(1)\r\n\tcrypto.getRandomValues(bytes)\r\n\tif (bytes[0]! < max) {\r\n\t\treturn bytes[0]!\r\n\t}\r\n\treturn generateRandomInteger(max)\r\n}\r\n\r\nexport function generateRandomString(\r\n\tlength: number,\r\n\talphabet: string = '0123456789abcdefghijklmnopqrstuvwxyz'\r\n): string {\r\n\tlet result = ''\r\n\tfor (let i = 0; i < length; i++) {\r\n\t\tresult += alphabet[generateRandomInteger(alphabet.length)]\r\n\t}\r\n\treturn 'ufl_' + result\r\n}\r\n","import { File } from 'formidable'\r\nimport { PutObjectCommand, PutObjectCommandInput, S3Client } from '@aws-sdk/client-s3'\r\nimport { S3 } from './s3.js'\r\nimport { readFileSync, statSync } from 'node:fs'\r\n\r\nexport async function UploadToR2({\r\n\tfile,\r\n\tbucket,\r\n\timage,\r\n}: {\r\n\tfile: File\r\n\tbucket: string\r\n\timage: boolean\r\n}) {\r\n\tconst body = readFileSync(file.filepath)\r\n\r\n\tconst params: PutObjectCommandInput = {\r\n\t\tBucket: bucket,\r\n\t\tKey: file.originalFilename as string | undefined,\r\n\t\tContentLength: statSync(file.filepath).size,\r\n\t\tBody: body,\r\n\t\tContentType: file.mimetype!,\r\n\t\tContentDisposition: image ? `inline; filename=${file.originalFilename}` : undefined,\r\n\t\tACL: 'public-read',\r\n\t}\r\n\r\n\tconst command = new PutObjectCommand(params)\r\n\r\n\tS3.send(command)\r\n\t\t.then(() => {\r\n\t\t\treturn { error: false, payload: params.Key }\r\n\t\t})\r\n\t\t.catch((err: any) => {\r\n\t\t\treturn { error: true, payload: err }\r\n\t\t})\r\n}\r\n","import { S3Client, ListBucketsCommand } from '@aws-sdk/client-s3'\r\n\r\nconst { ACCOUNT_ID, ACCESS_KEY_ID, SECRET_ACCESS_KEY } = process.env\r\n\r\nexport const S3 = new S3Client({\r\n\tregion: 'auto',\r\n\tendpoint: `https://${ACCOUNT_ID!}.r2.cloudflarestorage.com`,\r\n\tcredentials: {\r\n\t\taccessKeyId: ACCESS_KEY_ID!,\r\n\t\tsecretAccessKey: SECRET_ACCESS_KEY!,\r\n\t},\r\n})\r\n","import { H3Event, createError, getRequestHeader } from 'h3'\r\nimport { Key } from '../models/api-keys.js'\r\nimport { User } from '../models/user.js'\r\n\r\nexport default async function Handler(event: H3Event) {\r\n\tconst apikey = getRequestHeader(event, 'api-key')\r\n\tif (!apikey) {\r\n\t\tthrow createError({\r\n\t\t\tstatusCode: 401,\r\n\t\t\tstatusMessage: 'No API key provided',\r\n\t\t})\r\n\t}\r\n\tconst existingKey = await Key.findOne({ value: apikey })\r\n\r\n\tif (!existingKey) {\r\n\t\tthrow createError({\r\n\t\t\tstatusCode: 401,\r\n\t\t\tstatusMessage: 'Invalid API key',\r\n\t\t})\r\n\t}\r\n\r\n\tif (!event.context.key && !event.context.user) {\r\n\t\tconst user = await User.findById(existingKey.user_id).exec()\r\n\t\tevent.context.key = existingKey\r\n\t\tevent.context.user = user\r\n\t}\r\n}\r\n","import mongoose from 'mongoose'\r\nimport { planSchema } from './Plan'\r\n\r\nconst { Schema } = mongoose\r\n\r\nconst userSchema = new Schema({\r\n\tfirstName: String,\r\n\tlastName: String,\r\n\tgithubUserName: String,\r\n\temail: String,\r\n\tplan: planSchema,\r\n})\r\n\r\nconst UserModel = () => mongoose.model('users', userSchema)\r\nexport const User = (mongoose.models['users'] || UserModel()) as ReturnType<typeof UserModel>\r\n","import mongoose, { Types } from 'mongoose'\r\n\r\nconst { Schema } = mongoose\r\n\r\nexport const planSchema = new Schema({\r\n\tactive: Boolean,\r\n\tplan_type: {\r\n\t\ttype: String,\r\n\t\tenum: ['Trial', 'Tier 1', 'Tier 2'],\r\n\t},\r\n\ttotalStorage: Number,\r\n\tstorageCap: Number,\r\n\tpaid: { type: Boolean, default: false },\r\n})\r\n"],"mappings":"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","names":["import_h3","formidable","import_config","import_mongoose","mongoose","mongoose","import_client_s3","import_h3","import_mongoose","import_mongoose","Schema","mongoose","Schema","mongoose"]}